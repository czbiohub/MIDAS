# -*- mode: Snakemake -*-
#
# Build customer MIDAS database.
#
# Chunyu Zhao 2019-06-26

import os, subprocess, sys, shutil, gzip
from pathlib import Path
from midas import utility
import Bio.SeqIO
from collections import defaultdict


project_dir = Path("/mnt/chunyu20TB/midas-iggdb/IGGdb/v2.0.0")
toc_fp = str(project_dir/"genomes2species.tab")

mapfile_fp = str(project_dir/"mapfile")

temp_path = Path(str(project_dir/"temp"))
repgenome_path = Path(str(project_dir/"clean_set"))
species_dir = Path(str(project_dir/"species"))
genomes_dir = Path(str(project_dir/"genomes"))
prokka_dir = Path(str(project_dir/"prokka"))


GENOMES = {}
SPECIES = defaultdict(list)
Gpath = {}
with open(toc_fp) as f:
    next(f)
    for line in f:
        genome_id = line.rstrip('\n').split('\t')[1]
        species_id = line.rstrip('\n').split('\t')[-1]
        GENOMES[genome_id] = str(species_id)
        SPECIES[species_id].append(str(genome_id))
        Gpath[genome_id] = "%s/clean_set/%s" % (str(project_dir), str(species_id))

with open(mapfile_fp, "w") as out:
    out.write('\t'.join(["genome_id", "species_id", "rep_genome"]) + '\n')
    for genome in GENOMES.keys():
        if GENOMES[genome] == genome:
            line = [genome, GENOMES[genome], 1]
        else:
            line = [genome, GENOMES[genome], 0]
        out.write('\t'.join(map(str, line)) + '\n')

rule species_map_genome:
    input:
        str(repgenome_path/"{species}"/"{species}.fna.lz4")
    output:
        str(project_dir/"genomes"/"{species}.fna.lz4")
    params:
        src = str(repgenome_path/"{species}"),
        dst = str(project_dir/"genomes")
    run:
        genomes = SPECIES[wildcards['species']]
        src = params['src']
        dst = params['dst']
        for genome in genomes:
            f = "%s/%s.fna.lz4" % (src, genome)
            t = "%s/%s.fna.lz4" % (dst, genome)
            shutil.copyfile(f, t)

rule _all_genomes:
    input:
        expand(str(project_dir/"genomes"/"{species}.fna.lz4"), species = list(SPECIES.keys()))

GENOMES = list(GENOMES.keys())[:10]

SPECIES_0701 = ["GUT_GENOME096063","GUT_GENOME096203","GUT_GENOME147854","GUT_GENOME001120", \
            "GUT_GENOME147678", "GUT_GENOME001115","GUT_GENOME095967","GUT_GENOME000152",\
            "GUT_GENOME095021", "GUT_GENOME000092","GUT_GENOME140074","GUT_GENOME140808",
            "GUT_GENOME140826"]


"""
Gene annotation
"""
rule run_prokka:
    input:
        str(genomes_dir/'{genome}.fna.lz4')
    output:
        faa = str(prokka_dir/'{genome}'/'{genome}.faa'),
        ffn = str(prokka_dir/'{genome}'/'{genome}.ffn'),
        fna = str(prokka_dir/'{genome}'/'{genome}.fna'),
        genes = str(prokka_dir/'{genome}'/'{genome}.genes')
    params:
        outdir = str(prokka_dir/'{genome}'),
        prefix = "{genome}",
        tsv = str(prokka_dir/'{genome}'/'{genome}.tsv'),
        fna = str(genomes_dir/'{genome}.fna')
    shell:
        """
        lz4 -d {input} &$ \
        prokka --kingdom Bacteria --outdir {params.outdir} --prefix {params.prefix} \
        --locustag {params.prefix} --centre X --compliant --force {params.fna} &&
        mv {params.tsv} {output.genes}
        """

rule _all_prokka:
    input:
        expand(str(prokka_dir/'{genome}'/'{genome}.genes'), genome=GENOMES)

"""
Pan-genome
- pangeomes/{species}/genes.ffn: all genes from specificed genomes
- pangeomes/{species}/centroids.ff: gene sequences from 99%% identity gene clusters
- pangeomes/{species}/gene_info.txt: information for all genes from genes.ffn
"""
