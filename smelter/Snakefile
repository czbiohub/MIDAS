# -*- mode: Snakemake -*-
#
# Build customer MIDAS database.
#
# Chunyu Zhao 2019-06-26

import os, subprocess, sys, shutil, gzip
from pathlib import Path
from midas import utility
import Bio.SeqIO
from collections import defaultdict


project_dir = Path("/mnt/chunyu20TB/midas-iggdb/IGGdb/v2.0.0")
toc_fp = str(project_dir/"genomes2species.tab")

mapfile_fp = str(project_dir/"mapfile")

temp_path = Path(str(project_dir/"temp"))
repgenome_path = Path(str(project_dir/"clean_set"))
species_dir = Path(str(project_dir/"species"))
genomes_dir = Path(str(project_dir/"genomes"))
prokka_dir = Path(str(project_dir/"prokka"))
pangenomes_dir = Path(str(project_dir/"pangenomes"))


GENOMES = {}
SPECIES = defaultdict(list)
Gpath = {}
with open(toc_fp) as f:
    next(f)
    for line in f:
        genome_id = line.rstrip('\n').split('\t')[1]
        species_id = line.rstrip('\n').split('\t')[-1]
        GENOMES[genome_id] = str(species_id)
        SPECIES[species_id].append(str(genome_id))
        Gpath[genome_id] = "%s/clean_set/%s" % (str(project_dir), str(species_id))

if not os.path.isfile(mapfile_fp):
    with open(mapfile_fp, "w") as out:
        out.write('\t'.join(["genome_id", "species_id", "rep_genome"]) + '\n')
        for genome in GENOMES.keys():
            if GENOMES[genome] == genome:
                line = [genome, GENOMES[genome], 1]
            else:
                line = [genome, GENOMES[genome], 0]
            out.write('\t'.join(map(str, line)) + '\n')

rule species_map_genome:
    input:
        str(repgenome_path/"{species}"/"{species}.fna.lz4")
    output:
        str(project_dir/"genomes"/"{species}.fna.lz4")
    params:
        src = str(repgenome_path/"{species}"),
        dst = str(project_dir/"genomes")
    run:
        genomes = SPECIES[wildcards['species']]
        src = params['src']
        dst = params['dst']
        for genome in genomes:
            f = "%s/%s.fna.lz4" % (src, genome)
            t = "%s/%s.fna.lz4" % (dst, genome)
            shutil.copyfile(f, t)

SPECIES_0701 = ["GUT_GENOME147854","GUT_GENOME001120","GUT_GENOME096063","GUT_GENOME096203", \
            "GUT_GENOME147678", "GUT_GENOME001115","GUT_GENOME095967","GUT_GENOME000152",\
            "GUT_GENOME095021", "GUT_GENOME000092","GUT_GENOME140074","GUT_GENOME140808",
            "GUT_GENOME140826"]

rule _all_genomes:
    input:
        expand(str(project_dir/"genomes"/"{species}.fna.lz4"), species = SPECIES_0701)
        #species = list(SPECIES.keys()))

GENOMES = list(GENOMES.keys())

"""
Gene annotation
"""
rule run_prokka:
    input:
        str(genomes_dir/'{genome}.fna.lz4')
    output:
        faa = str(prokka_dir/'{genome}'/'{genome}.faa'),
        ffn = str(prokka_dir/'{genome}'/'{genome}.ffn'),
        fna = str(prokka_dir/'{genome}'/'{genome}.fna'),
        genes = str(prokka_dir/'{genome}'/'{genome}.genes')
    params:
        outdir = str(prokka_dir/'{genome}'),
        prefix = "{genome}",
        tsv = str(prokka_dir/'{genome}'/'{genome}.tsv'),
        fna = str(genomes_dir/'{genome}.fna')
    shell:
        """
        lz4 -d {input} && \
        prokka --kingdom Bacteria --outdir {params.outdir} --prefix {params.prefix} \
        --locustag {params.prefix} --centre X --compliant --force {params.fna} &&
        mv {params.tsv} {output.genes} &&
        rm {params.fna}
        """

rule _all_prokka:
    input:
        expand(str(prokka_dir/'{genome}'/'{genome}.genes'), genome=GENOMES)

"""
Pan-genome
- pangeomes/{species}/genes.ffn: all genes from specificed genomes
- pangeomes/{species}/centroids.ff: gene sequences from 99%% identity gene clusters
- pangeomes/{species}/gene_info.txt: information for all genes from genes.ffn
"""

TEST_SPECIES = ["GUT_GENOME125418", "GUT_GENOME011056"]
GENOMES = [list(SPECIES[species]) for species in TEST_SPECIES]
print(len(GENOMES))

## This should be a faster way to do this. But let's keep it work now.
rule write_genes:
    input:
        genomes = expand(str(prokka_dir/'{genome}'/'{genome}.ffn'), genome = GENOMES),
        mapfile = mapfile_fp
    output:
        genes = str(pangenomes_dir/"{species}"/"genes.ffn")
    params:
        sp_id = "{species}",
        genome_fp = str(prokka_dir)
    run:
        ## for each species, cat genes per genome into  pan_genoems/sp.id/genes.ffn
        ## might run into command arguments too long if do it in a Snakemake way
        genomes = SPECIES[params['sp_id']]
        genes = {}
        stats = {}
        stats['genes'] = 0
        for genome in genomes:
            genome_file = '%s/%s/%s.ffn' % (params['genome_fp'], genome, genome)
            for rec in Bio.SeqIO.parse(genome_file, 'fasta'):
                if str(rec.seq) == '' or str(rec.id) in ['', '|']:
                    continue
                else:
                    genes[rec.id] = str(rec.seq).upper()
                    stats['genes'] += 1
        ## write genes
        with open(output['genes'], 'w') as file:
            for geneid, geneseq in genes.items():
                file.write('>%s\n%s\n' % (geneid, geneseq))

rule uclust_genes_99:
    input:
        genes = str(pangenomes_dir/"{species}"/"genes.ffn")
    output:
        centroids = str(pangenomes_dir/"{species}"/"temp"/"centroids.99.ffn"),
        uc = str(pangenomes_dir/"{species}"/"temp"/"uclust.99.txt"),
        centroids_species = str(pangenomes_dir/"{species}"/"centroids.ffn"),
    params:
        pid = 0.99
    threads: 1
    shell:
        """
        vsearch -cluster_fast {input.genes} -id {params.pid} -threads {threads} \
                -centroids {output.centroids} -uc {output.uc}

        cp {output.centroids} {output.centroids_species}
        """

rule uclust_genes:
    input:
        str(pangenomes_dir/"{species}"/"temp"/"centroids.99.ffn")
    output:
        centroids = str(pangenomes_dir/"{species}"/"temp"/"centroids.{pid}.ffn"),
        uc = str(pangenomes_dir/"{species}"/"temp"/"uclust.{pid}.txt")
    shell:
        """
        calc(){{ awk "BEGIN {{ print "$*" }}"; }}
        pid=`calc {wildcards.pid}/100`
        vsearch -cluster_fast {input} -id $pid -threads {threads} \
                -centroids {output.centroids} -uc {output.uc}
        """

rule _all_cluster:
    input:
        expand(str(pangenomes_dir/"{species}"/"temp"/"centroids.{pid}.ffn"), pid=[95, 90, 85, 80, 75], species = TEST_SPECIES)
